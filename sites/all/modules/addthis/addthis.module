<?php

/**
 * @file
 * Hook implementations for the AddThis-module. Most of the logic is defined
 * in a separate AddThis-class to keep the .module-file clean.
 */

module_load_include('inc', 'addthis', 'includes/addthis.block');
module_load_include('inc', 'addthis', 'includes/addthis.field');

/**
 * Implements hook_help().
 */
function addthis_help($path, $arg) {
  switch ($path) {
    case 'admin/help#addthis':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The AddThis module defines AddThis field type for the Field module. A AddThis field may contain a button, toolbox, sharecount or customized sharing tool using <a href=\"http://addthis.com/\">AddThis.com</a>.") . '</p>';
      return $output;
  }
}

/**
 * Implements hook_filter_format_update().
 */
function addthis_filter_format_update($format) {
  field_cache_clear();
}

/**
 * Implements hook_filter_format_disable().
 */
function addthis_filter_format_disable($format) {
  field_cache_clear();
}


/**
 * Implements hook_menu().
 */
function addthis_menu() {
  $menuItems['admin/config/system/addthis'] = array(
    'title' => 'AddThis',
    'description' => 'Configure AddThis settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('addthis_admin_settings_form'),
    'access arguments' => array(AddThis::PERMISSION_ADMINISTER_ADDTHIS),
    'type' => MENU_NORMAL_ITEM,
    'file' => AddThis::ADMIN_INCLUDE_FILE,
  );
  return $menuItems;
}

/**
 * Implements hook_permission().
 */
function addthis_permission() {
  return array(
    AddThis::PERMISSION_ADMINISTER_ADDTHIS => array(
      'title' => t('Administer AddThis'),
      'description' => t('Perform maintenance tasks for AddThis.'),
    ),
    AddThis::PERMISSION_ADMINISTER_ADVANCED_ADDTHIS => array(
      'title' => t('Administer advanced AddThis'),
      'description' => t('Perform advanced maintenance tasks for AddThis.'),
    ),
  );
}

/**
 * Implements hook_page_alter().
 */
function addthis_page_alter(&$page) {
  AddThis::getInstance()->addWidgetJs();
  AddThis::getInstance()->addConfigurationOptionsJs();
}

/**
 * Implements hook_form_alter().
 */
function addthis_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'field_ui_field_edit_form' &&
      $form['#field']['type'] == AddThis::FIELD_TYPE &&
      $form['#field']['type'] == AddThis::MODULE_NAME) {
    // We hide the instance fieldset because we don't hold any value's per instance.
    // I know this is a dirty hack to hide it but I'm not aware that there is a way to
    // disable instance value's in the field API.
    $form['field']['#access'] = FALSE;
    $form['instance']['required']['#access'] = FALSE;
    $form['instance']['description']['#access'] = FALSE;
    $form['instance']['default_value_widget']['#access'] = FALSE;
  }
}

/**
 * Implementation of hook_theme().
 */
function addthis_theme($existing, $type, $theme, $path) {
  return array(
    'addthis_element' => array(
      'render element' => 'addthis_element'
    )
  );
}

/**
 * Theme the elements that are created in the AddThis module. This is
 * created with hook_addthis_element.
 */
function theme_addthis_element($variables) {
  // Get the element
  $element = $variables['addthis_element'];

  // Refactor the classes in the array #classes if there.
  if (isset($element['#classes']) && count($element['#classes']) > 0) {
    $att_class = implode(' ', $element['#classes']);
    if (isset($element['#attributes']['class'])) {
      $att_class = trim($element['#attributes']['class']) . ' ' . $att_class;
    }
    // Finally implode it and add it to or override it in the attributes.
    $element['#attributes']['class'] = $att_class;
  }

  // When rendered children are passed put them in the value
  // to wrap the element we are rendering. If #children is there it means
  // we are called as theme_wrapper.
  if (isset($element['#children']) && !empty($element['#children'])) {
    $element['#value'] = $element['#children'];
  }

  // Set default if not there
  if (!isset($element['#tag_empty'])) {
    $element['#tag_empty'] = FALSE;
  }
  // When the #theme_wrappers is set we can't render a empty tag.
  // Or if #tag_empty is set to FALSE.
  if (isset($element['#theme_wrappers']) && !isset($element['#value']) ||
      isset($element['#tag_empty']) && $element['#tag_empty'] === FALSE && !isset($element['#value'])) {
    $element['#value'] = '';
    // Note that when #theme is set and not #theme_wrappers the tag will
    // always be rendered not empty unless #tag_empty is set to TRUE.
  }

  // Render the html
  if (!isset($element['#value'])) {
    return '<' . $element['#tag'] . drupal_attributes($element['#attributes']) . " />\n";
  }
  else {
    $output = '<' . $element['#tag'] . drupal_attributes($element['#attributes']) . '>';
    if (isset($element['#value_prefix'])) {
      $output .= $element['#value_prefix'];
    }
    $output .= $element['#value'];
    if (isset($element['#value_suffix'])) {
      $output .= $element['#value_suffix'];
    }
    $output .= '</' . $element['#tag'] . ">\n";
    return $output;
  }
}
